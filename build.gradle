buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
}

plugins {
  id "com.github.hierynomus.license" version "0.13.1"
}
plugins {
  id "net.vivin.gradle-semantic-build-versioning" version "2.0.2"
}

group = 'tech.hillview'
// version = ('git describe --tags'.execute()).text.trim()

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
  mavenCentral()
  jcenter()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

defaultTasks 'jar'

jar {
  manifest {
    attributes(
      "Implementation-Title": project.name,
      "Implementation-Version": project.version
      )
  }
}

// idea {
//   module {
//     inheritOutputDirs = false
//       outputDir = file("$buildDir/classes/main/")
//   }
// }

configurations {
  all*.exclude group: 'log4j', module: 'log4j'
  // all*.exclude group: 'log4j'
  // all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
  compile('org.apache.zookeeper:zookeeper:3.4.9') {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  }

  compile 'org.apache.curator:curator-x-discovery:2.11.0'
  compile 'org.apache.curator:curator-framework:2.11.0'

  compile 'com.google.guava:guava:17.0'

  compile 'com.squareup.retrofit2:retrofit:2.1.0'
  compile 'com.squareup.retrofit2:converter-jackson:2.1.0'

  compile 'org.slf4j:slf4j-api:1.7.21'

  compileOnly 'org.springframework:spring-context:4.2.8.RELEASE'
  compileOnly 'org.springframework:spring-beans:4.2.8.RELEASE'

  testCompile 'ch.qos.logback:logback-core:1.1.7'
  testCompile 'ch.qos.logback:logback-classic:1.1.7'
  testCompile 'org.slf4j:jcl-over-slf4j:1.7.21'

  testCompile 'junit:junit:4.12'
  // testCompile 'org.assertj:assertj-core:3.5.2'

  testCompile 'org.springframework:spring-test:4.2.8.RELEASE'
  testCompile 'org.springframework:spring-context:4.2.8.RELEASE'
  testCompile 'org.springframework:spring-beans:4.2.8.RELEASE'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)  }
      /**
      * Download snapshot and release artifacts from group https://oss.sonatype.org/content/groups/public
      * Download snapshot, release and staged artifacts from staging group https://oss.sonatype.org/content/groups/staging
      */

      // repository(url: "file:///Users/tommy/myrepo/")
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name "${project.group}:${project.name}"
        description 'Api-client proxy for services registered in ZooKeeper via curator with Service Discovery and Load balancing.'
        url 'https://github.com/tommyxu/curator-service-api-client.git'
        scm {
          url 'https://github.com/tommyxu/curator-service-api-client.git'
          connection 'scm:git@github.com:tommyxu/curator-service-api-client.git'
        }
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }
        organization {
          name 'github'
          url 'https://github.com/tommyxu'
        }
        developers {
          developer {
            id 'tommyxu'
            name 'Tommy Xu'
            email "xuyijun@gmail.com"
          }
        }
      }
    }
  }
}

test {
  testLogging {
    // showStandardStreams = true
  }
}

license {
  header rootProject.file('LICENSE_HEADER')
  strictCheck true
}

project.version.with {
  // matching {
  //   major = 1
  //   minor = 2
  // }
}
